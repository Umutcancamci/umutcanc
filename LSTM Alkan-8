import numpy as np
import pandas as pd
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.optimizers import Adam
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from dateutil.relativedelta import relativedelta

# Load and preprocess the dataset
df = pd.read_excel('Alkan-8.xlsx')  # Adjust the path as needed
df['Date'] = pd.to_datetime(df['Date'])
scaler = MinMaxScaler(feature_range=(0, 1))
data_normalized = scaler.fit_transform(df[['R, kOm']].values.reshape(-1, 1))

def create_dataset(dataset, look_back=1):
    X, Y = [], []
    for i in range(len(dataset) - look_back - 1):
        a = dataset[i:(i + look_back), 0]
        X.append(a)
        Y.append(dataset[i + look_back])
    return np.array(X), np.array(Y)

look_back = 3
X, Y = create_dataset(data_normalized, look_back)
train_size = int(len(X) * 0.67)
trainX, trainY = X[:train_size], Y[:train_size]
testX, testY = X[train_size:], Y[train_size:]
trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))
testX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))

# Define and train the LSTM model
model = Sequential([
    LSTM(128, input_shape=(1, look_back), return_sequences=True),
    Dropout(0.2),
    LSTM(64, return_sequences=False),
    Dropout(0.2),
    Dense(1)
])
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(trainX, trainY, epochs=100, validation_data=(testX, testY), verbose=1)

# Predict the future 'R, kOm' values
months_to_predict = 12  # Manually set the number of months to predict
last_date_in_dataset = df['Date'].max()
future_dates = [last_date_in_dataset + relativedelta(months=x) for x in range(1, months_to_predict + 1)]

future_data = data_normalized[-look_back:].reshape(1, look_back, 1)
future_predictions = []
for _ in range(months_to_predict):
    future_data_reshaped = future_data.reshape(1, 1, look_back)
    next_point = model.predict(future_data_reshaped)
    future_predictions.append(next_point[0][0])
    future_data = np.append(future_data[:, 1:, :], [[[next_point[0][0]]]], axis=1)

future_predictions = scaler.inverse_transform(np.array(future_predictions).reshape(-1, 1))

# Plotting the results
plt.figure(figsize=(15, 6))
plt.plot(df['Date'], df[['R, kOm']].values, label='Original Data', color='grey')
plt.plot(future_dates, future_predictions, label='Future Predictions', color='green', linestyle='--')
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
plt.gca().xaxis.set_major_locator(mdates.MonthLocator())
plt.gcf().autofmt_xdate()
plt.title('Future Resistance Prediction')
plt.xlabel('Date')
plt.ylabel('R, kOm')
plt.legend()
plt.show()

print(future_predictions)
